version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: chronoguard_db
      POSTGRES_USER: chronoguard_user
      POSTGRES_PASSWORD: chronoguard_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chronoguard_user -d chronoguard_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      target: backend
    environment:
      DATABASE_URL: postgresql://chronoguard_user:chronoguard_password@db:5432/chronoguard_db
      REDIS_URL: redis://redis:6379
      SECRET_KEY: your-production-secret-key-change-this
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
    ports:
      - "7000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./ml/models:/app/ml/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for ML Tasks
  celery-worker:
    build:
      context: .
      target: backend
    command: celery -A app.celery worker --loglevel=info
    environment:
      DATABASE_URL: postgresql://chronoguard_user:chronoguard_password@db:5432/chronoguard_db
      REDIS_URL: redis://redis:6379
      SECRET_KEY: your-production-secret-key-change-this
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./ml/models:/app/ml/models

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      target: backend
    command: celery -A app.celery beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://chronoguard_user:chronoguard_password@db:5432/chronoguard_db
      REDIS_URL: redis://redis:6379
      SECRET_KEY: your-production-secret-key-change-this
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./ml/models:/app/ml/models

  # Frontend
  frontend:
    build:
      context: .
      target: frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:7000/api/v1
    ports:
      - "7500:3000"
    depends_on:
      - backend

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
    depends_on:
      - frontend
      - backend

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: chronoguard-network